# scan_chain
jtag newtap quark_d2000 lmt    -irlen 8  -irmask 0xff  -expected-id   0x38289013  -disable
jtag newtap quark_d2000 cltap  -irlen 8  -irmask 0xff  -expected-id   0x0e786013  -enable

# targets
target create lmt.cpu quark_d2000 -endian little -chain-position quark_d2000.lmt

lmt.cpu configure -event gdb-attach { halt }

# openocd puts tap at front of chain not end of chain
# to enable the lmt core we need to set bits [1:0] to 0x1
proc quark_d2000_lmt_tapenable {} {
	echo "Enabling lmt core tap"
	set val [ eval { irscan quark_d2000.cltap 0x11 ; drscan quark_d2000.cltap 12 0 } ]
	set val [ format 0x%x [ expr ( ( 0x$val & 0xffc ) | 0x01 ) ] ]
	irscan quark_d2000.cltap 0x11
	drscan quark_d2000.cltap 12 $val
	runtest 10
}

# to disable the lmt core we need to set bits [1:0] to 0x0
proc quark_d2000_lmt_tapdisable {} {
	echo "Disabling lmt core tap"
	set val [ eval { irscan quark_d2000.cltap 0x11 ; drscan quark_d2000.cltap 12 0 } ]
	set val [ format 0x%x [ expr ( 0x$val & 0xffc ) ] ]
	irscan quark_d2000.cltap 0x11
	drscan quark_d2000.cltap 12 $val
	runtest 10
}

proc quark_d2000_setup {} {
	jtag tapenable quark_d2000.lmt
}

jtag configure quark_d2000.lmt -event tap-enable "quark_d2000_lmt_tapenable"
jtag configure quark_d2000.lmt -event tap-disable "quark_d2000_lmt_tapdisable"

jtag configure quark_d2000.cltap -event setup "quark_d2000_setup"

#default frequency but this can be adjusted at runtime
adapter_khz 1000

reset_config trst_only

## Utility functions

# utility functions to delete OTPD and FLASH
proc del_flash0 {} { mww 0xB0100018 0x80 ; sleep 2000 ; mdw 0xB0100014 }
# utility function to delete OTPC, OTPD and FLASH
proc mass_erase {} {
 if { [ info exists ::QUARK_D2000_OTPC_DATA_WRITE_ENABLED ] &&
    [ expr $::QUARK_D2000_OTPC_DATA_WRITE_ENABLED ] } then {
	echo "Deleting  OTPC, OTPD and FLASH regions"
	mww 0xB0100018 0xC0 ; sleep 2000 ; mdw 0xB0100014
 } else {
	echo "No operation was performed"
	echo "mass_erase command deletes also the OTPC DATA protected region, but this behavior is disabled by default."
	echo "The following command will allow it: set QUARK_D2000_OTPC_DATA_WRITE_ENABLED 1"
	echo "To mass erase only the OTPD and FLASH regions use the 'del_flash0' command instead."
 }
}

# utility function to set SoC clock to 32MHz Si
proc clk32M { {jtag_khz 1000} } {
	# slow speed to make sure we can write mem
	adapter_khz 3
	# LMT halt
	irscan quark_d2000.cltap 0x70 ; drscan quark_d2000.cltap 8 0x1
	# set the SoC clock to the 32 MHz Silicon one
	mww 0xB0800008 0x2
	mww 0xB0800038 0x7
	mww 0xB0800038 0x87
	# set the JTAG clock to the desired one
	adapter_khz $jtag_khz
	# clear halt flag and reset the SoC
	irscan quark_d2000.cltap 0x70 ; drscan quark_d2000.cltap 8 0x0
	reset halt
}

# utility function to recover JTAG
# delay parameter is critical to stop the FW as soon as possible, the value
# varies from board to board, typical values are between 114 and 130 ms
proc jtag_recovery { {delay_ms 117} } {
	# disable polling, it'll just get in the way
	poll off

	# disable the lmt tap if not disabled already
	if { [jtag tapisenabled quark_d2000.lmt] } then { jtag tapdisable quark_d2000.lmt }

	# trigger a reset
	ftdi_set_signal nSRST 1
	sleep 500
	ftdi_set_signal nSRST 0

	# here we should wait 4 uS after reset is deasserted and reaches a logic 1
	# to have the tap available, but the reset needs some time to reach that
	# level as there are capacitances involved.
	# even if we switched the reset pin back to input we couldn't poll it fast
	# enough to get the right timing, so we need to measure experimentally the
	# rise time and determine the right openocd delay.
	#
	# granularity on the tcl command line in openocd is 1 ms.
	# if this is too coarse add a specific reset and delay command in C.
	sleep $delay_ms

	# re-initialize the jtag scanchain
	jtag arp_init

	# assert vpreq (it's cleared on reset)
	irscan quark_d2000.cltap 0x70 ; drscan quark_d2000.cltap 8 0x3

	# wait until we actually stop, we should actually poll vprdy but if we did
	# not stop after another 500 ms something went terribly wrong and polling
	# wouldn't help anyway
	sleep 500

	# re-initialize the jtag scanchain
	jtag arp_init

	# enable polling again
	poll on
}

# utility function to flash ROM
proc flash_rom { rom_file { address 0x0 } } {
	init
	echo "Setup clock"
	clk32M
	echo "Start flash"
	load_image $rom_file $address
	echo "Start verify"
	verify_image_offset $rom_file $address 0x150
	echo "Reset target"
	reset halt
	echo "All done"
}
