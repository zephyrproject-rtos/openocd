#  Copyright (C) 2014-2015 Synopsys, Inc.
#  Anton Kolesov <anton.kolesov@synopsys.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the
#  Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

#
# AXC002 CPU card for the AXS101.
#
# Contains ARC HS34 and ARC HS 36.
#

# _CHIPNAME really should be same for all cores and be something like AXC001,
# however at the moment ARC OpenOCD will use chip name to decide whether it is
# ARC 600, ARC 700 or ARC EM. Therefore we need to set it each time for each
# core. This crutch can be removed after the way how OpenOCD distinguishes
# different ARCs will be fixed and CHIPNAME will be just a chip name.

# AXC002 contains 2 cores: ARC HS34 and ARC HS36. Three JTAG combinations are
# possible, depending on configuration of TSEL jumpers:
# 1. All cores are in chain;
# 2. Only ARC HS34 is in the chain;
# 3. Only ARC HS36 is in the chain.
# Default is "all in". Caller may use variables HAS_[HS34|HS36] to override.

source [find cpu/arc/hs.tcl]

set _coreid 0
set _dbgbase [expr 0x00000000 | ($_coreid << 13)]

# On-chip SRAM has size of 256KiB, mapped to 0x2000_0000.
set _sram_addr 0x20000000
set _sram_size 0x40000

if { ![info exists HAS_HS34] } {
    set HAS_HS34 1
}
if { ![info exists HAS_HS36] } {
    set HAS_HS36 1
}

# CHIPNAME will be used to choose core family (600, 700 or EM). As far as
# OpenOCD is concerned EM and HS are identical.
set _CHIPNAME arc-em

# For some reasons OpenOCD discovers JTAG TAPs in reverse order.

if { $HAS_HS36 } {
    set _TARGETNAME $_CHIPNAME.cpu2
    jtag newtap $_CHIPNAME cpu2 -irlen 4 -ircapture 0x1 -expected-id 0x200824b1
    puts "$_TARGETNAME"
    puts "target create $_TARGETNAME arc32 -chain-position $_TARGETNAME"
    target create $_TARGETNAME arc32 -chain-position $_TARGETNAME
    $_TARGETNAME configure -coreid $_coreid
    $_TARGETNAME configure -dbgbase $_dbgbase
    $_TARGETNAME configure -work-area-phys $_sram_addr -work-area-size $_sram_size
    $_TARGETNAME configure -event reset-assert "arc_common_reset $_TARGETNAME"
    set _coreid [expr $_coreid + 1]
    set _dbgbase [expr 0x00000000 | ($_coreid << 13)]
    arc_hs_init_regs
}
if { $HAS_HS34 } {
    set _TARGETNAME $_CHIPNAME.cpu1
    jtag newtap $_CHIPNAME cpu1 -irlen 4 -ircapture 0x1 -expected-id 0x200424b1

    target create $_TARGETNAME arc32 -chain-position $_TARGETNAME
    $_TARGETNAME configure -coreid $_coreid
    $_TARGETNAME configure -dbgbase $_dbgbase
    $_TARGETNAME configure -work-area-phys $_sram_addr -work-area-size $_sram_size
    $_TARGETNAME configure -event reset-assert "arc_common_reset $_TARGETNAME"
    set _coreid [expr $_coreid + 1]
    set _dbgbase [expr 0x00000000 | ($_coreid << 13)]
    arc_hs_init_regs
}

# vi:ft=tcl
